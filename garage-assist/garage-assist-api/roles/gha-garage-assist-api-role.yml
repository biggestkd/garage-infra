AWSTemplateFormatVersion: '2010-09-09'
Description: "GitHub Actions OIDC role (gha-role) for CFN deploys, ECR pushes, and Lambda image updates"

Parameters:
  GitHubOrg:
    Type: String
    Description: "GitHub org/user, e.g., biggestkd"

  GitHubRepo:
    Type: String
    Default: "garage-assist-api"
    Description: "GitHub repo name, e.g., garage-assist-api"

  GitHubBranch:
    Type: String
    Default: "refs/heads/dev"
    Description: "Git ref to allow (e.g., refs/heads/dev | refs/heads/main | refs/heads/* | refs/tags/*)"

  RoleName:
    Type: String
    Default: garage-assist-api-gha-role
    Description: "Name of the role GitHub Action will assume in Garage Assist API repo"

  LambdaExecutionRoleArn:
    Type: String
    Description: "ARN of the IAM role to be used as the Lambda execution role"

Resources:

  GitHubOIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList: [ sts.amazonaws.com ]

  GitHubActionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref RoleName
      Description: "Role assumed directly by GitHub Actions (OIDC) from repo ${GitHubOrg}/${GitHubRepo}/${GitHubBranch}"
      MaxSessionDuration: 3600
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Ref GitHubOIDCProvider
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: sts.amazonaws.com
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub "repo:${GitHubOrg}/${GitHubRepo}:ref:${GitHubBranch}"
      Policies:
        - PolicyName: gha-ecr-lambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:

              # --- ECR: authenticate (must be Resource "*") ---
              - Sid: EcrAuth
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"

              # --- ECR: push/pull to a single repo (named after your GitHub repo) ---
              - Sid: EcrRepoScoped
                Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                  - ecr:BatchGetImage
                  - ecr:DescribeImages
                  - ecr:ListImages
                  - ecr:GetDownloadUrlForLayer
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${GitHubRepo}"

              # --- Lambda: CREATE function (requires iam:PassRole; CreateFunction is not resource-scoped) ---
              - Sid: LambdaCreateFunction
                Effect: Allow
                Action:
                  - lambda:CreateFunction
                Resource: "*"

              # --- Lambda: update image-based functions (scoped by name prefix) ---
              - Sid: LambdaUpdate
                Effect: Allow
                Action:
                  - lambda:UpdateFunctionCode
                  - lambda:PublishVersion
                  - lambda:GetFunction
                  - lambda:GetFunctionConfiguration
                  - lambda:UpdateAlias
                  - lambda:CreateAlias
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${GitHubRepo}"

              # --- Lambda Function URL: create/manage URL + invoke policy on your functions ---
              - Sid: LambdaFunctionUrlAdmin
                Effect: Allow
                Action:
                  - lambda:CreateFunctionUrlConfig
                  - lambda:GetFunctionUrlConfig
                  - lambda:UpdateFunctionUrlConfig
                  - lambda:DeleteFunctionUrlConfig
                  - lambda:AddPermission        # to allow InvokeFunctionUrl
                  - lambda:RemovePermission
                  - lambda:TagResource
                  - lambda:UntagResource
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${GitHubRepo}"

              # --- Pass only the explicitly provided Lambda execution role ---
              - Sid: PassRoleToLambda
                Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !Ref LambdaExecutionRoleArn
                Condition:
                  StringEquals:
                    "iam:PassedToService": "lambda.amazonaws.com"


Outputs:
  GitHubActionsRoleArn:
    Description: "Role ARN that GitHub should assume in this account"
    Value: !GetAtt GitHubActionsRole.Arn
