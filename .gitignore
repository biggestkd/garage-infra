# Local .terraform directories
.terraform/

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc


# Flutter/Dart related
.dart_tool/
.flutter-plugins
.flutter-plugins-dependencies
.packages
.pub-cache/
build/
generated_plugin_registrant.dart

# iOS/macOS specific
ios/Pods/
ios/.symlinks/
ios/Flutter/App.framework
ios/Flutter/Flutter.framework
ios/Flutter/Generated.xcconfig
ios/Flutter/flutter_export_environment.sh
macos/Pods/
macos/.symlinks/
macos/Flutter/ephemeral/
macos/Flutter/flutter_export_environment.sh

# Android specific
android/.gradle/
android/app/build/
android/app/debug.keystore
android/key.properties
android/local.properties

# IntelliJ IDEA specific
.idea/
*.iml
*.ipr
*.iws
out/

# VS Code settings (if you switch to VS Code later)
.vscode/

# Logs & user-specific files
*.log
*.DS_Store
*.iml

# Git specific
.pub/

## Golang specific
# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, built with `go test -c`
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Dependency directories (remove the comment below to include it)
# vendor/

# Go workspace file
go.work
go.work.sum
